{"version":3,"sources":["components/BotSide.js","components/ClientSide.js","components/Messages.js","components/Input.js","components/Header.js","components/LandingPage.js","API.js","App.js","reportWebVitals.js","index.js"],"names":["BotMessage","fetchMessage","useState","isLoading","setLoading","message","setMessage","audio","Audio","volume","useEffect","a","msg","play","loadMessage","className","src","size","round","ClienSide","text","githubHandle","Messages","messages","el","useRef","current","scrollIntoView","block","behavior","id","ref","Input","onSend","setText","onSubmit","e","preventDefault","length","alert","type","onChange","target","value","placeholder","version","xmlns","width","height","viewBox","points","Header","useStyles","makeStyles","theme","tes","display","justifyContent","alignItems","fontFamily","backgroundImage","appbar","background","appbarWrapper","left","margin","appbarTitle","flexGrow","icon","color","fontSize","colorText","container","textAlign","title","goDown","classes","checked","setChecked","AppBar","elevation","Toolbar","IconButton","Collapse","in","timeout","collapsedHeight","href","class","alt","parseTanggal","date","Date","tahun","getFullYear","bulan","getMonth","tanggal","getDate","hari","getDay","jam","getHours","menit","getMinutes","detik","getSeconds","ans","API","GetChatbotResponse","data","fetch","method","headers","body","JSON","stringify","then","r","json","res","Promise","resolve","reject","setTimeout","answer","item","map","i","jenis_task","kode_matkul","topik","join","App","setMessages","loadWelcomeMessage","send","newMessages","concat","path","exact","render","props","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42357e0c.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Avatar from 'react-avatar';\r\n\r\nexport default function BotMessage({ fetchMessage }) {\r\n  const [isLoading, setLoading] = useState(true);\r\n  const [message, setMessage] = useState(\"\");\r\n  var audio = new Audio(\"/Blop.mp3\");\r\n  audio.volume = 0.4;\r\n  useEffect(() => {\r\n    async function loadMessage() {\r\n      const msg = await fetchMessage();\r\n      setLoading(false);\r\n      setMessage(msg);\r\n      audio.play();\r\n    }\r\n    loadMessage();\r\n  }, [fetchMessage]);\r\n\r\n  return (\r\n    <div className=\"message-container-bot\">\r\n      <div><Avatar src=\"kirby2.png\" size={50} round=\"20px\" /></div>\r\n      <div className=\"bot-message\">{isLoading ? \"...\" : message}</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Avatar from 'react-avatar';\r\n\r\nexport default function ClienSide({ text }) {\r\n  return (\r\n    <div className=\"message-container-client\">\r\n      <span className=\"user-message\">{text}</span>\r\n      <span><Avatar githubHandle=\"weebs\" size={50} round=\"20px\" /></span>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useRef } from \"react\";\r\n\r\nexport default function Messages({ messages }) {\r\n  const el = useRef(null);\r\n  useEffect(() => {\r\n    el.current.scrollIntoView({ block: \"end\", behavior: \"smooth\" });\r\n  });\r\n  return (\r\n    <div className=\"messages\">\r\n      {messages}\r\n      <div id={\"el\"} ref={el} />\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function Input({ onSend }) {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const handleInputChange = e => {\r\n    setText(e.target.value);\r\n  };\r\n\r\n  const handleSend = e => {\r\n    e.preventDefault();\r\n    if (text.length<1) {\r\n      alert(\"Silahkan isi pesan terlebih dahulu!\");\r\n    }\r\n    else {\r\n      onSend(text);\r\n      setText(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"input\">\r\n      <form onSubmit={handleSend}>\r\n        <input\r\n          type=\"text\"\r\n          onChange={handleInputChange}\r\n          value={text}\r\n          placeholder=\"Input your message here...\"\r\n        />\r\n        <button>\r\n          <svg\r\n            version=\"1.1\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 500 500\"\r\n          >\r\n            <g>\r\n              <g>\r\n                <polygon points=\"0,497.25 535.5,267.75 0,38.25 0,216.75 382.5,267.75 0,318.75\" />\r\n              </g>\r\n            </g>\r\n          </svg>\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Header() {\r\n  return <div className=\"header\">&nbsp;SimSimSimi Bot</div>;\r\n}\r\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { AppBar, IconButton, Toolbar, Collapse } from '@material-ui/core';\nimport { FaChevronDown, FaEllipsisH } from \"react-icons/fa\";\n\nconst useStyles = makeStyles((theme) => ({\n  tes: {\n    \n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    height: '100vh',\n    fontFamily: 'Nunito',\n    backgroundImage: `url(${process.env.PUBLIC_URL + '/Landing.jpeg'})`,\n  },\n  appbar: {\n    background: 'none',\n  },\n  appbarWrapper: {\n    left :\"60px\",\n    width: '80%',\n    margin: '0 auto',\n  },\n  appbarTitle: {\n    flexGrow: '1',\n  },\n  icon: {\n    color: '#fff',\n    fontSize: '2rem',\n  },\n  colorText: {\n    color: '#ffdf6b',\n  },\n  container: {\n    textAlign: 'center',\n  },\n  title: {\n    color: '#fff',\n    fontSize: '4.5rem',\n  },\n  goDown: {\n    color: '#fea82f',\n    fontSize: '4rem',\n  },\n}));\nexport default function Header() {\n  const classes = useStyles();\n  const [checked, setChecked] = useState(false);\n  useEffect(() => {\n    setChecked(true);\n  }, []);\n  return (\n    <div className={classes.tes} id=\"header\">\n       \n      <AppBar className={classes.appbar} elevation={0}>\n        <Toolbar className={classes.appbarWrapper}>\n          <h1 className={classes.appbarTitle}>\n            Sim<span className={classes.colorText}>SimSimi.</span>\n          </h1>\n          <IconButton>\n            <FaEllipsisH className={classes.icon} />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n\n      <Collapse\n        in={checked}\n        {...(checked ? { timeout: 1000 } : {})}\n        collapsedHeight={50}\n      >\n        <div className={classes.container}>\n          <h1 className={classes.title}>\n            Welcome to <br />\n            Sim<span className={classes.colorText}>SimSimi.</span>\n          </h1>\n            <IconButton href=\"/chat\">\n              <FaChevronDown className={classes.goDown} />\n            </IconButton>\n        </div>\n         <div class=\"Character\">\n                  <img class=\"Character_shadow pixelart\" src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/21542/DemoRpgCharacterShadow.png\" alt=\"Shadow\" />      \n                  <img class=\"Character_spritesheet pixelart face-down\" src=\"https://s3-us-west-2.amazonaws.com/s.cdpn.io/21542/DemoRpgCharacter.png\" alt=\"Character\" />\n      </div>\n      </Collapse>\n    </div>\n  );\n}","function parseTanggal(text) {\r\n  var date = new Date(text);\r\n  var tahun = date.getFullYear();\r\n  var bulan = date.getMonth();\r\n  var tanggal = date.getDate();\r\n  var hari = date.getDay();\r\n  var jam = date.getHours();\r\n  var menit = date.getMinutes();\r\n  var detik = date.getSeconds();\r\n  switch(hari) {\r\n    case 0: hari = \"Minggu\"; break;\r\n    case 1: hari = \"Senin\"; break;\r\n    case 2: hari = \"Selasa\"; break;\r\n    case 3: hari = \"Rabu\"; break;\r\n    case 4: hari = \"Kamis\"; break;\r\n    case 5: hari = \"Jum'at\"; break;\r\n    case 6: hari = \"Sabtu\"; break;\r\n    default:\r\n      hari = \"unknown\"; break;\r\n  }\r\n  switch(bulan) {\r\n    case 0: bulan = \"Januari\"; break;\r\n    case 1: bulan = \"Februari\"; break;\r\n    case 2: bulan = \"Maret\"; break;\r\n    case 3: bulan = \"April\"; break;\r\n    case 4: bulan = \"Mei\"; break;\r\n    case 5: bulan = \"Juni\"; break;\r\n    case 6: bulan = \"Juli\"; break;\r\n    case 7: bulan = \"Agustus\"; break;\r\n    case 8: bulan = \"September\"; break;\r\n    case 9: bulan = \"Oktober\"; break;\r\n    case 10: bulan = \"November\"; break;\r\n    case 11: bulan = \"Desember\"; break;\r\n    default:\r\n      hari = \"unknown\"; break;\r\n  }\r\n  var ans = hari + \", \" + tanggal + \" \" + bulan + \" \" + tahun;\r\n  ans  = ans + \" \"+ ((jam < 10)?\"0\":\"\") + jam + \":\" + ((menit < 10)?\"0\":\"\") + menit + \":\" + ((detik < 10)?\"0\":\"\") + detik;\r\n  return ans;\r\n};\r\n\r\nconst API = {\r\n    GetChatbotResponse: async message => {\r\n      let data='';\r\n      if (message !== \"hi\")\r\n        await fetch('/api/data',{\r\n          method: 'POST',\r\n          headers:{'Content-type':'application/json'},\r\n          body: JSON.stringify(message),\r\n        }).then(r=>r.json()).then(res=>{\r\n          data=res;\r\n          // console.log(data);\r\n        });\r\n      \r\n      return new Promise(function(resolve, reject) {\r\n        setTimeout(function() {\r\n          if (message === \"hi\") {\r\n            resolve(\"Welcome to SimSimSimibot!\");\r\n          }\r\n          else if (data.id === -1) {\r\n            resolve(data.message)\r\n          }\r\n          else if (data.id === 1) {\r\n            resolve(data.message)\r\n          }\r\n          else if (data.id === 2) {\r\n            let answer = \"\";\r\n            if (data.message !== 'naon') {\r\n              answer = data.message;\r\n            }\r\n            else {\r\n              answer =\"[DEADLINE]\\n\"+data.item.map( (a, i) => `${i+1}. ${a.jenis_task} - ${a.kode_matkul} - ${a.topik} - ${parseTanggal(a.tanggal)}, id task = ${a.id}`).join('\\n');\r\n              parseTanggal(data.item[0].tanggal);\r\n              if (data.item.length < 1) {\r\n                answer = \"Tidak ada deadline! Silahkan bermain :)\"\r\n              }\r\n            }\r\n            resolve(answer);\r\n          }\r\n          else if (data.id === 3) {\r\n            let answer =\"[DEADLINE]\\n\";\r\n            if (data.item.length < 1) {\r\n              answer = \"Tidak ada deadline! Silahkan bermain :)\"\r\n            }\r\n            else {\r\n              answer = answer + data.item.map( (a, i) => `${i+1}. ${a.jenis_task} - ${a.kode_matkul} - ${a.topik} - ${parseTanggal(a.tanggal)}, id task = ${a.id}`).join('\\n');\r\n            }\r\n            resolve(answer);\r\n          }\r\n          else if (data.id === 4) {\r\n            resolve(data.message);\r\n          }\r\n           else if (data.id === 5) {\r\n            resolve(data.message);\r\n           }\r\n          else if (data.id === 6) {\r\n            resolve(data.message);            \r\n          }\r\n          else {\r\n            resolve(\"echo : \" + message);\r\n          } \r\n        }, 1500);\r\n      });\r\n    }\r\n};\r\n  \r\nexport default API;\r\n  ","import {useState,useEffect} from 'react'\nimport BotSide from './components/BotSide'\nimport ClientSide from \"./components/ClientSide\";\nimport Messages from \"./components/Messages\";\nimport Input from \"./components/Input\";\nimport Header from \"./components/Header\";\nimport LandingPage from \"./components/LandingPage\";\nimport \"./style.css\";\nimport \"./chatbot.scss\"\nimport API from \"./API\";\nimport {BrowserRouter as Router, Route} from 'react-router-dom'\nconst App = () => {\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    async function loadWelcomeMessage() {\n      setMessages([\n        <BotSide\n          key=\"0\"\n          fetchMessage={async () => await API.GetChatbotResponse(\"hi\")}\n        />\n      ]);\n    }\n    loadWelcomeMessage();\n  }, []);\n\n  \n\n  const send = async text => {\n    const newMessages = messages.concat(\n      <ClientSide key={messages.length + 1} text={text} />,\n      <BotSide\n        key={messages.length + 2}\n        fetchMessage={async () => await API.GetChatbotResponse(text)}\n      />\n    );\n    setMessages(newMessages);\n    // await fetch('/api/data',{\n    //   method: 'POST',\n    //   headers:{'Content-type':'application/json'},\n    //   body: JSON.stringify(text),\n    // }).then(r=>r.json()).then(res=>{\n    //   console.log(JSON.stringify(text));\n    //   console.log(res);\n    // });\n  };\n\n  return (\n    <Router>\n      <Route path='/' exact render={(props) => (\n        <LandingPage/>\n        \n        ) }/>\n      <Route path='/chat' exact render={(props) => (\n        <>\n        \n        <div className=\"chatbot\"> \n                     \n          <Header />\n          <Messages messages={messages} />\n          <Input onSend={send} />\n        </div>\n        </>\n        ) }/>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}